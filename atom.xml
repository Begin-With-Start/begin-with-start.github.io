<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Begin-With-Start</title>
  
  
  <link href="/hexiaofei.github.io/atom.xml" rel="self"/>
  
  <link href="https://begin-with-start.github.io/hexiaofei.github.io/"/>
  <updated>2017-09-18T06:35:57.905Z</updated>
  <id>https://begin-with-start.github.io/hexiaofei.github.io/</id>
  
  <author>
    <name>hexiaofei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>so库全解析</title>
    <link href="https://begin-with-start.github.io/hexiaofei.github.io/2017/09/18/so-source-design/"/>
    <id>https://begin-with-start.github.io/hexiaofei.github.io/2017/09/18/so-source-design/</id>
    <published>2017-09-18T03:05:25.000Z</published>
    <updated>2017-09-18T06:35:57.905Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/storm.png" alt="image"></p><a id="more"></a><h1 id="google-android系统so库比较多的原因"><a href="#google-android系统so库比较多的原因" class="headerlink" title="google android系统so库比较多的原因"></a>google android系统so库比较多的原因</h1><p>为适配众多的cpu架构，实际就是指令集的区别，在开始从复杂指令集改动到简易指令集的微软架构之后，又分出若干阵营，那么这个地方就不展开了，展开我怕篇幅不太够啊，少年。</p><h1 id="android-cpu架构分类"><a href="#android-cpu架构分类" class="headerlink" title="android cpu架构分类"></a>android cpu架构分类</h1><h2 id="android-当前支持的七种cpu架构"><a href="#android-当前支持的七种cpu架构" class="headerlink" title="android 当前支持的七种cpu架构"></a>android 当前支持的七种cpu架构</h2><p>Android系统目前支持以下七种不同的CPU架构：ARMv5，ARMv7 (从2010年起)，x86 (从2011年起)，MIPS (从2012年起)，ARMv8，MIPS64和x86_64 (从2014年起)，每一种都关联着一个相应的ABI。<br>~ABI 应用程序二进制接口(Application binary interface)定义了二进制文件(so库)如何运行在相应的系统上。</p><h2 id="每种cpu架构对应着一个ABI"><a href="#每种cpu架构对应着一个ABI" class="headerlink" title="每种cpu架构对应着一个ABI"></a>每种cpu架构对应着一个ABI</h2><p>armeabi，armeabi-v7a，x86，mips，arm64-v8a，mips64，x86_64</p><h1 id="android如何去寻找so库原理"><a href="#android如何去寻找so库原理" class="headerlink" title="android如何去寻找so库原理"></a>android如何去寻找so库原理</h1><h2 id="android如何去寻找so库原理图解"><a href="#android如何去寻找so库原理图解" class="headerlink" title="android如何去寻找so库原理图解"></a>android如何去寻找so库原理图解</h2><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/%E5%AF%BC%E5%9B%BE.png" alt="image"></p><p>android系统寻找so库的顺序，先区分架构，再去寻找完美适配的架构文件夹，若果找不到继续向兼容的架构寻找，匹配架构成功后，加载这个架构下所有的so到data文件夹中，如果在data中找不到应用中使用到的so库，那么会报异常，so link错误等等，不会再到其他架构中去扫描。</p><h2 id="几个需要明白的概念"><a href="#几个需要明白的概念" class="headerlink" title="几个需要明白的概念"></a>几个需要明白的概念</h2><h3 id="主ABI库"><a href="#主ABI库" class="headerlink" title="主ABI库"></a>主ABI库</h3><p>主ABI库： 与系统影响本身机器对应的ABI库<br>辅助ABI库： 与系统也支持的ABI对应<br>而，为实现最佳性能，应该提供主abi库</p><h3 id="各个架构库支持的ABI"><a href="#各个架构库支持的ABI" class="headerlink" title="各个架构库支持的ABI"></a>各个架构库支持的ABI</h3><p>X86 ： 可以运行在armeabi/armeabi-v7a 主要的ABI是X86,辅助ABI是armeabi-v7a<br>mips:  只定义了主ABI是mips(但是极少用于手机，可以忽略)<br>armeabi-v7a ： 主 armeabi-v7a ， 辅助armeabi</p><h3 id="只提供一种架构优缺点"><a href="#只提供一种架构优缺点" class="headerlink" title="只提供一种架构优缺点"></a>只提供一种架构优缺点</h3><p>只提供一种架构优点：可以减小包的体积<br>缺点： 只提供一种架构，而忽视其他架构，那么会影响到性能和兼容，同时也将丢失掉专门为64位优化的性能。</p><h2 id="android找so库对于软件开发影响"><a href="#android找so库对于软件开发影响" class="headerlink" title="android找so库对于软件开发影响"></a>android找so库对于软件开发影响</h2><p>从根本上来说，系统只会把他区分架构的文件夹整个复制到data目录，那么造成一个问题就是，每个架构的文件夹下都应该是so库的全量，如果三方服务供应商，只给了一个armeabi-v7a 的架构，而工程中准备只放一个armeabi的文件夹来减小包大小，那么应该将v7a中的so库拷贝到armeabi中。</p><p>同时在运行在androidstudio工程中的build.gradle defaultConfig 中添加：<br>    ndk {<br>            abiFilters “armeabi”<br>        }<br>在打包中，只包含armeabi的架构。</p><h1 id="大厂对于so架构的一些取舍"><a href="#大厂对于so架构的一些取舍" class="headerlink" title="大厂对于so架构的一些取舍"></a>大厂对于so架构的一些取舍</h1><p>armeabi-v7a : facebook , twitter<br>armeabi:    淘宝 微信<br>armeabi :   淘票票</p><p>还是来一个图来说明这个东西吧，毕竟没图你说个啥啊：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/demo3.gif.gif" alt="image"></p><h1 id="我可以大概算一个总结"><a href="#我可以大概算一个总结" class="headerlink" title="我可以大概算一个总结"></a>我可以大概算一个总结</h1><p>那么实际中我们的取舍遵从的原则：<br>1.为减小体积，只保留armeabi与armeabi-v7a，一般只保留一个<br>2.若只有一个架构，那么其他架构中的so，保留的文件夹下有有全量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjiyb.com1.z0.glb.clouddn.com/storm.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="so库实战" scheme="https://begin-with-start.github.io/hexiaofei.github.io/categories/so%E5%BA%93%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="工程" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="实战" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="so" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/so/"/>
    
      <category term="应用" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>values在碎片化各种屏幕中的系统加载策略问题探讨及ui适配的选择</title>
    <link href="https://begin-with-start.github.io/hexiaofei.github.io/2017/09/15/2017-09-15-md/"/>
    <id>https://begin-with-start.github.io/hexiaofei.github.io/2017/09/15/2017-09-15-md/</id>
    <published>2017-09-15T08:58:25.000Z</published>
    <updated>2017-09-18T06:33:15.665Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cc.cocimg.com/api/uploads/20151029/1446106231700434.jpg" alt="image"></p><a id="more"></a><h2 id="android寻找资源策略"><a href="#android寻找资源策略" class="headerlink" title="android寻找资源策略"></a>android寻找资源策略</h2><p><img src="https://developer.android.com/images/resources/res-selection-flowchart.png" alt="image"></p><h2 id="values-两种系统识别文件夹，细分三种"><a href="#values-两种系统识别文件夹，细分三种" class="headerlink" title="values 两种系统识别文件夹，细分三种"></a>values 两种系统识别文件夹，细分三种</h2><p>values-XXXXxXXXX values-swXXXdp (values-hXXXdp values-wXXXdp)三种系统识别的文件夹命令分别是指定分辨率，适配优先宽度，宽高适配</p><h2 id="几种方式系统加载策略的探索"><a href="#几种方式系统加载策略的探索" class="headerlink" title="几种方式系统加载策略的探索"></a>几种方式系统加载策略的探索</h2><p>项目中使用到了多个values来进行适配的问题，想从根本上弄清楚系统在加载的时候，对文件夹取用策略的判断问题，用实际例子对比了一下swXXXdp与values-1920X1080和默认的values的加载其中的策略指定问题，混合模式下，系统对values的取用问题。<br>ok，开始吧。</p><p>添加values-1790X1080,values-1794X1076,values-1794X1080与values-sw361dp<br>前三个文件夹用来对比在跟屏幕真实分辨率相差一些数值的时候，系统会加载那个文件夹下的配置。<br>先用三个文件夹运行，观察结果：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/2-1.png" alt="image"></p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/2-2.png" alt="image"></p><p>当然是运行的完美契合的那个分辨率了，那么当我们在实际开发的时候，屏幕碎片化太大的时候，这种情况是可遇不可求的，故而需要去测试系统对与不完美契合的情况的处理，删除掉完美契合文件夹：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/3-1.png" alt="image"></p><p>运行结果是：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/3-2.png" alt="image"></p><p>加载到了1920X1148的values，那么说明在 1916X1152 与 1920X1148两个相近的宽高差值相同的文件夹中选择了高来进行优先选择，但是不能排除系统是把第一参数进行对比，而不是将values的匹配高进行优先匹配的，好吧，下面验证一下：<br>改名为：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/4-1.png" alt="image"></p><p>运行结果：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/4-2.png" alt="image"></p><p>加载的还是高匹配高的那个文件夹，那么结论：系统对不能完美匹配的values文件，遵循的是，宽高差值绝对值进行对比，如果宽高对于当前屏幕分辨率差值小的进行加载，如果当宽高绝对值差值相同的时候，以高匹配度高的values进行加载。<br>上面对比了在使用px来区分values的一些加载规则，那么当swXXXdp出现的时候，(sw—-small width)小宽度概念，当系统的宽度dp值大于该值的时候，加载这套设置。<br>问题在于dp与px方式同时出现的时候，系统对于优先级的判定问题。下面进行判定：<br>加入混合的值文件夹：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/1-1.png" alt="image"></p><p>运行结果：</p><p><img src="http://7xjiyb.com1.z0.glb.clouddn.com/1-2.png" alt="image"></p><h2 id="算是一个小总结"><a href="#算是一个小总结" class="headerlink" title="算是一个小总结"></a>算是一个小总结</h2><p>google还是对dp情有独钟啊，1152/3= 384dp跟360还差那么多，要是在一个水平线上来进行对比的话，真真的应该加载1920X1152啊，完美适配的呢，说好的做彼此的天屎的，呸，天屎，算了。<br>但是不管google怎么优先级，从细分上来说，如果是为了适配smartbar这个坑的话，一般来说，用px的values-1920X1152方式来进行细分适配要更加的精确，更能完美处理掉这个问题，毕竟还是在同一个水平上来处理的。但是官方是推sw-XXXdp的。<br>综上所述：<br>values-swXXXdp  &gt; values-XXXXxXXXX  &gt; values ;<br>注： values-XXXXXxXXXXX 方式的时候，通过宽高跟屏幕分辨率的差值绝对值来进行对比，优先高。<br>好吧，可能有人在等源码，我一起放上来吧</p><p><a href="https://github.com/Begin-With-Start/Adaptation.git" target="_blank" rel="external">传送门之大传送之术</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cc.cocimg.com/api/uploads/20151029/1446106231700434.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="values解析" scheme="https://begin-with-start.github.io/hexiaofei.github.io/categories/values%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="工程" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="values" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/values/"/>
    
      <category term="实战" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="总结" scheme="https://begin-with-start.github.io/hexiaofei.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
